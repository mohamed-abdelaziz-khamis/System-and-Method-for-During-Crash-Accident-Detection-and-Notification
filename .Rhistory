library(TSA)
data(tempdub)
# first creates the first pair of harmonic functions and then fit the model
har.=harmonic(tempdub,1)
model4=lm(tempdub~har.)
summary(model4)
source('E:/Blink/Exp 18 Feb 2016/R code/Fourier Transformation.r', encoding = 'UTF-8')
setwd("E:/Blink/Exp 18 Feb 2016/R code")
X.k <- fft(c(1,2,3,4))
plot.frequency.spectrum(X.k,xlimits=c(1:4))
plot.frequency.spectrum(X.k,xlimits=c(0:3))
plot.frequency.spectrum(X.k,xlimits=c(0:3))
plot.frequency.spectrum(X.k,xlimits=c(0:4))
plot.frequency.spectrum(X.k,xlimits=c(0:1))
X.k <- fft(c(1,2,3,4))
plot.frequency.spectrum(X.k,xlimits=c(0:1))
fft(c(1,2,3,4))
X.k <- fft(c(1,2,3,4))/4
plot.frequency.spectrum(X.k,xlimits=c(0:1))
1/0.71
plot.frequency.spectrum(X.k,xlimits=c(0:2))
plot.frequency.spectrum(X.k,xlimits=c(0:1))
View(plot.frequency.spectrum)
View(plot.frequency.spectrum)
plot.frequency.spectrum(X.k)
plot.frequency.spectrum <- function(X.k, xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
# TODO: why this scaling is necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
}
X.k <- fft(c(1,2,3,4))/4
plot.frequency.spectrum(X.k)
X.k <- fft(c(1,2,3,4))
plot.frequency.spectrum(X.k)
X.k <- fft(c(1,2,3,4))/4
plot.frequency.spectrum(X.k)
plot.frequency.spectrum <- function(X.k, xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
# TODO: why this scaling is necessary?
# plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
}
plot.frequency.spectrum(X.k)
X.k <- fft(c(1,2,3,4,3,4,5))/7
plot.frequency.spectrum(X.k)
# Assume this time-series with a strong noise component:
set.seed(101)
acq.freq <- 200
time     <- 1
w        <- 2*pi/time
ts       <- seq(0,time,1/acq.freq)
trajectory <- 3*rnorm(101) + 3*sin(3*w*ts)
plot(trajectory, type="l")
# We can check if thereâ€™s some harmonic hidden in it (there is one, 3Hz harmonics):
X.k <- fft(trajectory)
plot.frequency.spectrum(X.k,xlimits=c(0,acq.freq/2))
plot.frequency.spectrum(X.k)
plot.frequency.spectrum(X.k)
plot.frequency.spectrum(X.k)
plot.frequency.spectrum <- function(X.k, xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
# TODO: why this scaling is necessary?
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
}
plot.frequency.spectrum(X.k)
plot.frequency.spectrum <- function(X.k, xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
# TODO: why this scaling is necessary?
# plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main="",
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
}
plot.frequency.spectrum(X.k)
plot.frequency.spectrum(X.k,xlimits=c(0,acq.freq/2))
plot.frequency.spectrum(X.k,xlimits=c(0,acq.freq/2))
plot(X.k,ts, plot="l")
plot(ts,X.k, plot="l")
plot(ts,X.k, type="l")
plot(ts,X.k, type="l")
plot.frequency.spectrum(X.k,xlimits=c(0,acq.freq/2))
plot(trajectory,ts, type="l")
plot(ts, trajectory, type="l")
plot(ts, trajectory, type="l")
x.k = fft(trajectory)/length(trajectory)
X.k = fft(trajectory)/length(trajectory)
rm(x.k)
plot(ts, trajectory, type="l")
plot.frequency.spectrum(X.k,xlimits=c(0,acq.freq/2))
ts  <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
acq.freq <- 100                          # data acquisition frequency (Hz)
ts  <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
trajectory <- 3*rnorm(101) + 3*sin(3*w*ts)
X.k = fft(trajectory)/length(trajectory)
plot(ts, trajectory, type="l")
View(plot.frequency.spectrum)
View(plot.frequency.spectrum)
